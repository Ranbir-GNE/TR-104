Promises in JavaScript
1. What are Promises?

    A Promise in JavaScript is an object representing the eventual completion (or failure) of an asynchronous operation.
    It acts as a placeholder for a value that is not immediately available but will be resolved in the future.

2. Why Use Promises?

    To handle asynchronous operations effectively.
    Provides a cleaner and more manageable way to deal with asynchronous code compared to traditional callback functions.
    Helps in avoiding callback hell by chaining .then() blocks.

3. How Promises Work?

A promise has three states:

    Pending: The initial state, neither fulfilled nor rejected.
    Fulfilled: The operation was completed successfully.
    Rejected: The operation failed.

const promise = new Promise((resolve, reject) => {
  let success = true;

  if (success) {
    resolve("Operation succeeded!");
  } else {
    reject("Operation failed!");
  }
});

promise
  .then((result) => console.log(result))   // Executes if resolved
  .catch((error) => console.error(error)) // Executes if rejected
  .finally(() => console.log("Done"));    // Executes in any case

4. Types of Promises

    Single Promise
        Handles a single asynchronous operation.

    Chained Promises
        Chains multiple .then() blocks for sequential execution.

Promise.resolve("Step 1")
  .then((result) => {
    console.log(result);
    return "Step 2";
  })
  .then((result) => {
    console.log(result);
  })
  .catch((error) => console.error(error));

Promise.all

    Runs multiple promises concurrently and waits until all are resolved or one is rejected.

Promise.all([promise1, promise2, promise3])
  .then((results) => console.log(results))
  .catch((error) => console.error(error));

Promise.race

    Resolves or rejects as soon as the first promise settles.

Promise.race([promise1, promise2, promise3])
  .then((result) => console.log(result))
  .catch((error) => console.error(error));

Promise.any

    Resolves as soon as any one of the promises is fulfilled, ignoring rejections.

    Promise.any([promise1, promise2, promise3])
      .then((result) => console.log(result))
      .catch((error) => console.error(error));

5. Concurrency and Parallelism

    Concurrency:
        Running multiple tasks simultaneously but not necessarily at the same time. Promises allow concurrent tasks like fetching multiple APIs together.

    const fetch1 = fetch(url1);
    const fetch2 = fetch(url2);

    Promise.all([fetch1, fetch2])
      .then((responses) => console.log("Both completed!"));

    Parallelism:
        True simultaneous execution, generally requiring multiple threads or cores. In JavaScript, parallelism is achieved with worker threads or external APIs.

6. Callback Hell

    What is it?
        A situation where callbacks are nested within other callbacks, making the code difficult to read and maintain.

    Example of Callback Hell:

asyncOperation1((result1) => {
  asyncOperation2(result1, (result2) => {
    asyncOperation3(result2, (result3) => {
      console.log("Final result:", result3);
    });
  });
});

How Promises Solve Callback Hell:
Promises flatten the nested structure and make the code more readable:

    asyncOperation1()
      .then((result1) => asyncOperation2(result1))
      .then((result2) => asyncOperation3(result2))
      .then((result3) => console.log("Final result:", result3))
      .catch((error) => console.error(error));

Learning Outcomes

    Understood the fundamentals of promises, their states, and how they simplify asynchronous programming.
    Learned the types of promises and their practical applications, such as Promise.all and Promise.race.
    Differentiated between concurrency and parallelism in the context of JavaScript.
    Identified callback hell and how promises provide a cleaner alternative.

Resources

    MDN Web Docs: Promises
    Callback Hell Official Site
    Concurrency in JavaScript
