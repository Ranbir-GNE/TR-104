Topics Covered:
1. Hooks in JavaScript (React)

    What Are Hooks?
        Hooks are functions that allow you to use state and other React features in functional components. They enable functional components to have features previously only available in class components (e.g., managing state, lifecycle methods).
        Introduced in React 16.8, hooks simplify the code structure and make components more reusable and modular.

    Why Use Hooks?
        Hooks provide a way to manage state and side effects in functional components, avoiding the need for class components.
        They allow for better code organization, cleaner logic, and the ability to share logic across components.
        Hooks like useState and useEffect enable managing component state and side effects, while useRef provides a way to persist values between renders without causing re-renders.

    How Do Hooks Work?
        Hooks are called at the top level of a functional component, not inside loops, conditions, or nested functions.
        Each hook returns a value or function that is used to manage or modify the state, refs, or side effects in the component.

    Common Hooks:
        useState()
        useEffect()
        useRef()
        useContext()

2. useState Hook

    Definition:
        useState is a hook that lets you add state to functional components. It returns an array with two elements: the current state value and a function to update that state.

    Syntax:

const [state, setState] = useState(initialValue);

    state holds the current state value.
    setState is a function that updates the state.
    initialValue is the initial value of the state when the component is first rendered.

Use Case:

    Managing form inputs, toggles, counters, or any state that needs to be tracked during the component lifecycle.

Example:

    const [count, setCount] = useState(0);
    const increment = () => setCount(count + 1);

3. useRef Hook

    Definition:
        useRef is a hook that returns a mutable object (a ref) which persists across renders. Unlike state, changes to a ref do not trigger re-renders of the component.
        It can be used to access DOM elements directly or to store values that should persist across renders without causing re-renders.

    Syntax:

const myRef = useRef(initialValue);

    myRef is an object with a current property where the value is stored.
    initialValue is the value that the ref will initially hold.

Parameters and Use Cases:

    Accessing DOM Elements:
        useRef can be used to store references to DOM elements, allowing direct manipulation (e.g., focusing an input field).
    Persisting Values Across Renders:
        It is often used for storing values that should persist across renders, but not trigger re-renders (e.g., timer IDs, previous values).

Example:

    const inputRef = useRef(null);
    const focusInput = () => {
      inputRef.current.focus();
    }

4. Task 1: Using useRef to Control Music Playback

    Objective:
        Implement music playback control using the useRef hook. The useRef will be used to store a reference to the audio element, allowing control over playback without triggering re-renders.

    Implementation:

   import { useRef, useState } from "react";
import songSrc from "../../public/song.mp3";
import { FaPlayCircle, FaPauseCircle } from "react-icons/fa";
import logo from "/images/logo.png";

const MusicPlayer = () => {
  const audioRef = useRef();
  const [playing, setPlaying] = useState(false);

  const handleClick = () => {
    if (playing) {
      audioRef.current.pause();
    } else {
      audioRef.current.play();
    }
    setPlaying(!playing);
  };

  return (
    <div className="p-8 space-y-8">
      <div className="w-full max-w-md mx-auto bg-gray-900 p-6 rounded-lg shadow-lg flex items-center space-x-4 justify-between">
        <img
          src={logo}
          alt="logo"
          className="w-16 h-16 rounded-md object-cover"
        />
        <div className="text-white">
          <h1 className="text-lg font-semibold">Welcome To Los Santos</h1>
          <h3 className="text-sm font-light">Grand Theft Auto V</h3>
        </div>
        <audio src={songSrc} ref={audioRef} />

        <div className="ml-auto">
          {!playing ? (
            <FaPlayCircle
              className="text-green-500 cursor-pointer"
              size={60}
              onClick={handleClick}
            />
          ) : (
            <FaPauseCircle
              className="text-red-500 cursor-pointer"
              size={60}
              onClick={handleClick}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default MusicPlayer;

    Explanation:
        audioRef is used to store the reference to the audio element.
        The playAudio and pauseAudio functions manipulate the audio playback using the audioRef.current object.
        Since useRef does not cause re-renders, this solution is efficient for controlling the audio element.

Resources:

    React Hooks: useState
    React Hooks: useRef
    MDN Web Docs on Refs :https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement

The session provided a comprehensive overview of hooks, particularly useState and useRef, focusing on their practical use cases. Implementing the useRef hook for controlling music playback was a valuable hands-on exercise in understanding how to manage DOM elements without causing unnecessary re-renders.
