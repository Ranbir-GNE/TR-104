Date: 29th July 2024

Topics Covered:
1. map() Function

    Syntax:

array.map(callback(currentValue, index, array), thisArg)

Description:

    Creates a new array by applying a callback function to each element of the original array.
    Does not modify the original array.

Use Cases:

    Transforming data (e.g., converting an array of numbers to their squares).
    Extracting specific properties from an array of objects.

Example:

    const numbers = [1, 2, 3, 4];
    const squares = numbers.map(num => num * num);
    console.log(squares); // Output: [1, 4, 9, 16]

2. filter() Function

    Syntax:

array.filter(callback(currentValue, index, array), thisArg)

Description:

    Creates a new array containing elements that pass a specified condition in the callback function.
    Does not modify the original array.

Use Cases:

    Filtering data based on specific criteria (e.g., extracting even numbers from an array).
    Removing unwanted elements from an array.

Example:

    const numbers = [1, 2, 3, 4, 5];
    const evenNumbers = numbers.filter(num => num % 2 === 0);
    console.log(evenNumbers); // Output: [2, 4]

Combining map() and filter()

    Description:
        Often used together for efficient data transformation and filtering.

    Example:

    const numbers = [1, 2, 3, 4, 5];
    const doubledEvens = numbers.filter(num => num % 2 === 0).map(num => num * 2);
    console.log(doubledEvens); // Output: [4, 8]

Resources:

    JavaScript map() 
    JavaScript filter() :https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map

The session emphasized the versatility and power of functional programming in JavaScript using map() and filter(). Practical exercises reinforced these concepts, demonstrating their utility in processing and transforming data efficiently.
