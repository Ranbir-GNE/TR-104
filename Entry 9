Topics Covered:
1. Using htmlFor in React

    What is htmlFor?
        In React, the for attribute in HTML is replaced by htmlFor because for is a reserved keyword in JavaScript.
        It is used to associate a <label> element with a specific form input by linking the id of the input field.

    Syntax:

    <label htmlFor="username">Username:</label>
    <input type="text" id="username" />

    Use Case:
        Enhances accessibility by enabling screen readers to identify the relationship between labels and form inputs.
        Clicking the label focuses the corresponding input field.

2. Alerts and Toasts

    What Are Alerts and Toasts?
        Alerts:
            Synchronous, blocking messages displayed to the user, often requiring an action to dismiss (e.g., alert(), browser-native alerts).
        Toasts:
            Non-blocking, brief notifications displayed on the screen, often used to provide feedback to the user (e.g., success or error messages).
            Toasts are customizable and dismiss automatically after a short duration.

    Differences Between Alerts and Toasts:
    Feature	Alerts	Toasts
    Blocking Behavior	Yes	No
    Customization	Limited	Highly Customizable
    Use Cases	Critical Messages	Feedback Notifications

3. Syntax for Alerts and Toasts

    Alerts (Native JavaScript):

alert('This is an alert!');

    Blocks user interaction until the alert is dismissed.

Toasts Using react-toastify:

    Installation:

npm install react-toastify

Basic Usage:

    import { ToastContainer, toast } from 'react-toastify';
    import 'react-toastify/dist/ReactToastify.css';

    const App = () => {
      const notify = () => toast('This is a toast message!');
      
      return (
        <div>
          <button onClick={notify}>Show Toast</button>
          <ToastContainer />
        </div>
      );
    };

4. Customizations in React Toasts (react-toastify)

    Custom Options:
        position: Controls where the toast appears (e.g., top-right, bottom-center).
        autoClose: Sets the duration (in ms) before the toast dismisses automatically.
        hideProgressBar: Hides the progress bar if set to true.
        closeOnClick: Allows dismissing the toast on click.
        theme: Sets the theme (e.g., light, dark).

    Customization Example:

const notifyCustom = () =>
  toast('Customized Toast!', {
    position: 'bottom-center',
    autoClose: 3000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    theme: 'dark',
  });

return (
  <div>
    <button onClick={notifyCustom}>Show Custom Toast</button>
    <ToastContainer />
  </div>
);

Styling with CSS:

    You can apply custom styles to toasts by overriding the default styles or providing your CSS classes.

    Example:

.custom-toast {
  background-color: #4caf50;
  color: white;
}

        toast('Styled Toast!', {
          className: 'custom-toast',
        });

5. Use Cases for Alerts and Toasts:

    Alerts:
        Confirmations (e.g., "Are you sure you want to delete this item?").
        Immediate error messages.
    Toasts:
        Success messages (e.g., "Item added to cart successfully").
        Warnings (e.g., "Your session is about to expire").
        Informational messages (e.g., "Download started").

Resources:

    React htmlFor Attribute: https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor
    MDN Web Docs: Alert: https://developer.mozilla.org/en-US/docs/Web/API/Window/alert
    React Toastify Documentation: https://www.npmjs.com/package/react-toastify

The session provided practical insights into leveraging htmlFor for accessibility, as well as utilizing alerts and toasts for user notifications. The customizations in react-toastify showcased how to create tailored toast notifications for various use cases in modern web applications.
